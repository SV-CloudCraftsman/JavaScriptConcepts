Modules in JavaScript
Modules in JavaScript allow you to break your code into reusable pieces. They help in organizing code, improving maintainability, and managing dependencies. 
Modules can expose (export) parts of their code (functions, variables, objects, etc.) and use (import) parts of other modules.

1. ES6 Modules
Introduced in ECMAScript 2015 (ES6), ES6 modules are the modern standard for modular JavaScript. 
They use import and export statements and work natively in modern browsers and Node.js (with the .mjs extension or type: "module" in package.json).

Exporting
Exports allow you to define parts of a module that can be used by other modules.

Named Exports
Multiple exports can be defined in a module.
Importers must use the exact names.
Example:

javascript
Copy code
// file: math.js
export const add = (a, b) => a + b;
export const subtract = (a, b) => a - b;
Default Export
Each module can have a single default export.
Importers can name it whatever they want.
Example:

javascript
Copy code
// file: greeting.js
export default function greet(name) {
    return `Hello, ${name}!`;
}
Importing
Named Imports
Must match the exported names.
Use curly braces {}.
Example:

javascript
Copy code
// file: app.js
import { add, subtract } from './math.js';

console.log(add(5, 3)); // Output: 8
console.log(subtract(5, 3)); // Output: 2
Default Import
No curly braces are needed.
You can use any name for the imported default export.
Example:

javascript
Copy code
// file: app.js
import greet from './greeting.js';

console.log(greet('Alice')); // Output: "Hello, Alice!"
Importing All Exports
Use * as to import all named exports as a single object.
Example:

javascript
Copy code
// file: app.js
import * as MathUtils from './math.js';

console.log(MathUtils.add(2, 3)); // Output: 5
console.log(MathUtils.subtract(5, 2)); // Output: 3
Real-Time Example
Imagine a web application with multiple features (e.g., user management, product catalog).

User Management Module:

javascript
Copy code
// file: user.js
export const getUser = (id) => ({ id, name: 'John Doe' });
export const deleteUser = (id) => `User ${id} deleted.`;
Main Application:

javascript
Copy code
// file: app.js
import { getUser, deleteUser } from './user.js';

const user = getUser(1);
console.log(user); // Output: { id: 1, name: 'John Doe' }

console.log(deleteUser(1)); // Output: "User 1 deleted."
2. CommonJS Modules
CommonJS is the module system used in Node.js (before ES6 modules became standard). It uses require to import and module.exports to export.

Exporting
Example:

javascript
Copy code
// file: math.js
const add = (a, b) => a + b;
const subtract = (a, b) => a - b;

module.exports = { add, subtract };
Importing
Example:

javascript
Copy code
// file: app.js
const { add, subtract } = require('./math');

console.log(add(5, 3)); // Output: 8
console.log(subtract(5, 3)); // Output: 2
Default Export in CommonJS
javascript
Copy code
// file: greeting.js
module.exports = function greet(name) {
    return `Hello, ${name}!`;
};

// file: app.js
const greet = require('./greeting');
console.log(greet('Alice')); // Output: "Hello, Alice!"
Real-Time Example
Express.js Application:

javascript
Copy code
// file: routes.js
module.exports = (app) => {
    app.get('/', (req, res) => res.send('Home Page'));
    app.get('/about', (req, res) => res.send('About Page'));
};

// file: app.js
const express = require('express');
const app = express();
require('./routes')(app);

app.listen(3000, () => console.log('Server running on port 3000'));
Comparison: ES6 Modules vs. CommonJS
Feature	ES6 Modules	CommonJS
Syntax	import / export	require / module.exports
Execution Time	Static (analyzed at compile time)	Dynamic (executed at runtime)
Default Export Support	Yes	Yes
Asynchronous Loading	Supported natively	Requires workarounds
Usage	Modern browsers, Node.js	Primarily Node.js
Key Takeaways
ES6 Modules are the modern standard and are statically analyzed, improving performance and enabling tree-shaking (removing unused code).
CommonJS is widely used in Node.js but lacks support for native asynchronous module loading.
Use ES6 modules for browser-based projects and modern Node.js applications.
CommonJS remains relevant for existing Node.js codebases.
