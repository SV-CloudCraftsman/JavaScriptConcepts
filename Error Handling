Error Handling in JavaScript
Error handling ensures that your application can gracefully handle unexpected situations without crashing. 
JavaScript provides structures like try, catch, finally, and the ability to throw custom errors to deal with runtime errors effectively.

1. Key Concepts
try: Defines a block of code to test for errors.
catch: Defines a block of code to handle any errors that occur in the try block.
finally: Defines a block of code that always runs after the try block, regardless of whether an error occurred or not.
throw: Allows you to create and throw custom errors.
2. Basic Syntax
javascript
Copy code
try {
    // Code that might throw an error
} catch (error) {
    // Code to handle the error
} finally {
    // Code that always runs (optional)
}
3. Real-Time Examples
Example 1: Simple Error Handling with try and catch
Scenario: Youâ€™re parsing a JSON string, but the input might not always be valid JSON.

javascript
Copy code
const jsonString = '{"name": "Alice", "age": 25}'; // Correct JSON
const invalidJsonString = '{name: "Alice", age: 25}'; // Incorrect JSON

try {
    const user = JSON.parse(jsonString); // This works fine
    console.log(user);
} catch (error) {
    console.error("Error parsing JSON:", error.message);
}

try {
    const invalidUser = JSON.parse(invalidJsonString); // This throws an error
} catch (error) {
    console.error("Error parsing JSON:", error.message); // Output: Error parsing JSON: Unexpected token n in JSON at position 1
}
Example 2: Using finally
Scenario: A resource (like a file or a database connection) needs to be closed regardless of success or failure.

javascript
Copy code
try {
    console.log("Opening a file...");
    // Simulate an error
    throw new Error("File not found");
} catch (error) {
    console.error("An error occurred:", error.message);
} finally {
    console.log("Closing the file...");
}

// Output:
// Opening a file...
// An error occurred: File not found
// Closing the file...
Example 3: Throwing Custom Errors
You can create and throw your own errors to indicate specific issues in your application.

javascript
Copy code
function divide(a, b) {
    if (b === 0) {
        throw new Error("Division by zero is not allowed.");
    }
    return a / b;
}

try {
    console.log(divide(10, 2)); // Works fine
    console.log(divide(10, 0)); // Throws an error
} catch (error) {
    console.error("Custom Error:", error.message); // Output: Custom Error: Division by zero is not allowed.
}
Example 4: Handling Multiple Errors
Scenario: Different actions are required for different types of errors.

javascript
Copy code
try {
    const action = "login";

    if (action === "login") {
        throw new Error("Login failed!");
    } else if (action === "signup") {
        throw new Error("Signup failed!");
    }
} catch (error) {
    if (error.message.includes("Login")) {
        console.error("Handle login error:", error.message);
    } else if (error.message.includes("Signup")) {
        console.error("Handle signup error:", error.message);
    } else {
        console.error("An unknown error occurred:", error.message);
    }
}
Example 5: Validating Input
Scenario: Validating user input in a function.

javascript
Copy code
function getUserAge(age) {
    if (typeof age !== "number") {
        throw new TypeError("Age must be a number");
    }
    if (age < 0) {
        throw new RangeError("Age must be positive");
    }
    return `User's age is ${age}`;
}

try {
    console.log(getUserAge(25)); // Works fine
    console.log(getUserAge(-5)); // Throws a RangeError
} catch (error) {
    if (error instanceof TypeError) {
        console.error("Type Error:", error.message);
    } else if (error instanceof RangeError) {
        console.error("Range Error:", error.message);
    } else {
        console.error("Unknown Error:", error.message);
    }
}
4. When to Use Each Component
Component	Purpose
try	Test code that may throw an error.
catch	Handle the error and prevent the application from crashing.
finally	Execute cleanup code, regardless of the outcome.
throw	Generate custom errors for specific conditions.
Real-Time Use Cases
API Call Handling
Ensure the application handles errors when a server is unreachable or sends invalid responses.

javascript
Copy code
async function fetchData() {
    try {
        const response = await fetch("https://example.com/data");
        if (!response.ok) {
            throw new Error(`HTTP Error: ${response.status}`);
        }
        const data = await response.json();
        console.log(data);
    } catch (error) {
        console.error("Failed to fetch data:", error.message);
    } finally {
        console.log("Fetch attempt complete.");
    }
}

fetchData();
Form Validation
Validate user input and provide meaningful feedback.

javascript
Copy code
function validateEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
        throw new Error("Invalid email format");
    }
    return true;
}

try {
    validateEmail("example.com");
} catch (error) {
    console.error(error.message); // Output: Invalid email format
}
Key Takeaways
Graceful Error Handling: Use try and catch to handle runtime errors without crashing the application.
Cleanup with finally: Always clean up resources like files or database connections using the finally block.
Custom Errors: Use throw to create specific, meaningful error messages that make debugging easier.
Error Specificity: Catch errors selectively using error types (TypeError, RangeError, etc.).
